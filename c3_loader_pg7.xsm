; -----------------------------------------------------------------------------
;
; "Code3 Ultra Tiny Tape Binary file loader"
;
; done by Seban / Code3^Slight
;
; 1st (2 block/records) version was released in the early nineties
;
; .O.	source code published at 2022.04.16 @ GitHub
; ..O
; OOO	>>> Public Domain <<<
;
; >>> use XASM to compile

	opt	h-f+

ldr_loc	equ	$0700

BPTR	equ	$3D

SETGFX	equ	$EF9C		; OS-ROM open screen editor (graphics mode in A register)
BOOTERR	equ	$C63E		; OS-ROM "BOOT ERROR" message
CASRDB	equ	$FD7A		; OS-ROM CASsette ReaD Block
CASCLS	equ	$FDCF		; OS-ROM Cassette Close

	org	ldr_loc		; start of code!

rts	dta	$60,$01,a(ldr_loc),c"SI"

st	ldx	#$ff
	stx	$d301		; turn-off BASIC
	sta	$bfd5		; put HI-byte of BOOT load address at screen (this will be ' because load adr. is $0700)

	inx
	stx	BPTR

cpl	jsr	CASRDB		; copy record data from cassette buffer to loader loc. in RAM
	sta	ldr_loc+$80,x
	ldx	BPTR
	bpl	cpl


nxt_lp	ldx	<rts		; set default INIT address to "RTS"
	ldy	>rts
	stx	$2e2
	sty	$2e3

ldr_lp	jsr	CASRDB		; read byte from stream ("C:")
	cpy	#$88		; check for EOF
	beq	eof		; jump when End of File is occured

	sta	seg_ptr+1	; store lo-byte of load address
once_l	sta	$2e0

	jsr	CASRDB		; read byte from stream
	sta	seg_ptr+2	; store hi-byte of load address
once_h	sta	$2e1

	and	seg_ptr+1	; mask with lo-byte
	cmp	#$ff		; chcek if those two bytes was $FFFF (binary file header)
	beq	ldr_lp		; get next bytes when file header is detected!

	jsr	CASRDB		; read lo-byte of end of data segment address
	clc
	adc	#1		; +1 (lo-byte)
	sta	sge_l+1		; store incremented lo-byte of end-of-segment address in code body
	php			; store status register of stack (we need "carry" bit value later)

	jsr	CASRDB		; read hi-byte of end of data segment address

	plp			; restore status register
	adc	#0		; add carry bit to hi-byte
	sta	sge_h+1		; store hi-byte of end-of-segment address in code body

	lda	#$2c		; only first segment will be can be a RUN address!
	sta	once_l
	sta	once_h

seg_lp	jsr	CASRDB		; read byte from stream
	bmi	err		; jump if error was detected
	
seg_ptr	sta	$c0de		; store received byte in memory

	inw	seg_ptr+1	; increment data pointer

	lda	seg_ptr+1	; compare actual address with end-of-segment address
sge_l	cmp	#0
	lda	seg_ptr+2
sge_h	sbc	#0
	bcc	seg_lp		; loop util end of segment data!
	
	jsr	init		; call INIT (if any was present)

	jmp	nxt_lp		; jump to load next segment!

init	jsr	CASCLS		; stop motor
	jmp	($2e2)		; call INIT vector

eof	jsr	CASCLS		; stop motor
	jmp	($2e0)		; call RUN vector

err	lda	#0		; set graphics mode to #0
	jsr	SETGFX		; open screen editor
	jsr	BOOTERR		; display "BOOT ERROR" message
	bne	*		; infinity loop

	org	ldr_loc+$ff	
	brk			; fill to end of data-record
